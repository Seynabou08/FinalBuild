Seynabou: 
- Look up I/O again

Implement role cards: Medic (half done)


• You may Discover a Cure at any Research Station — the color of its
city does not need to match the disease you are curing.

• On your turn, you may take a card from another player, if you are both
in the city that matches the card you are taking.

• On your turn, you may take any City card from the Researcher (only), if you are both in the same city.

• Your hand limit applies immediately after getting a card from another player.


Last: (when everything else is done)
design patterns




void Player::useEventCard(int i, int playerNum, InfectionDeck ideck, Map newMap)
{

	int choice = i;
	int cityChoice;
	int cardId;
	int num = 0;

	//check for event card
	// DOESNT TAKE IN ACCOUNT IF THE PLAYER HAS MORE THAN ONE EVENT CARD
	bool hasEventCard = false;
	int matchingCardIndex;

	for (int j = 0; j < this->getHandSize(); j++) {
		if (this->getHand()[j]->getType() == "Event Card") {
			cout << j << " " << this->getHand()[j]->getId() << endl;
			cardId = j;
			num = this->getHand()[j]->getId();
			hasEventCard = true;
		}
	}
	if (hasEventCard) {

		/*cout << "Which event card will you use?" << endl;

		cout << "1: Airlift" << endl;
		cout << "3: Resilient population" << endl;
		cout << "4: Government Grant" << endl;
		cout << "5: Forcast" << endl;
		

		while (num > 5 || num <= 0)
		{
			cin >> cardId;
			if (cardId > 5 || cardId <= 0) {
				cout << "You must choose an integer between 1 and 4!" << endl;
			}
		}
		*/
		switch (num) {

		case 1: // Airlift
		{
			if (this->getHand()[cardId]->getName() == "Airlift") {
				cout << "Which player's pawn do you want to move?";
				cin >> choice;
				while (choice <= 0 || choice > playerNum) cin >> choice;

				cout << "Which city do you want to move it to?";
				cin >> cityChoice;
				while (cityChoice <= 0 || cityChoice > 48) cin >> cityChoice;

				//test this out
				//this->flight(cityChoice);

				this->flight(this->getHand()[cityChoice]->getId());

				if (this->getRole() == "Contingency Planner")
					this->removeEvent();

				else
					this->discard(cardId);
			}
			else cout << "you don't own this event card." << endl;

			break;
		}

		case 2: // Resilient population
		{
			if (this->getHand()[cardId]->getName() == "Resilient Population") {
				int discard;

				ideck.showDiscardPile();

				cout << "Which card do you want to remove from the game?" << endl;
				cin >> discard;

				if (this->getRole() == "Contingency Planner")
					this->removeEvent();

				else
					this->discard(cardId);


			}
			else
				cout << "you don't own this event card." << endl;
			break;
		}

		case 3: // Government Grant
		{

			if (this->getHand()[cardId]->getName() == "Government Grant") {
				cout << "In which city do you want to add a reserch center?";
				cin >> cityChoice;
				while (cityChoice < 0 || cityChoice > 48) cin >> cityChoice;

				newMap.cities[cityChoice]->setResearchCenter(true);
				//this->buildStation(&newMap);
				this->increaseAction();

				if (this->getRole() == "Contingency Planner")
					this->removeEvent();

				else
					this->discard(cardId);


			}
			else cout << "you don't own this event card." << endl;
			break;
		}


		case 4: // Forcast event card
		{
			if (this->getHand()[cardId]->getName() == "Forcast") {

				int ind;
				vector<InfectionCard> temp;


				for (int j = 0; j < 6; j++)
				{
					temp.push_back(ideck.deck.front());
					cout << ideck.deck.at(j).getCityName() << endl;
				}

				string numbers[] = { "sixth","fifth","forth","third","second","first" };

				for (int j = 0; j < 6; j++) {

					cout << "Which card do you want to be in the " << numbers[j] << " position?" << endl;
					cin >> ind;

					ideck.deck.at(5 - j) = temp.at(ind);
					temp.at(ind) = temp.back();
					temp.pop_back();


					for (int k = 0; k < temp.size(); k++)
					{
						cout << temp.at(k).getCityName() << endl;
					}

					if (this->getRole() == "Contingency Planner")
						this->removeEvent();

					else
						this->discard(cardId);

				}

			}
			else cout << "you don't own this event card." << endl;
			break;
		}

		}
	}
	else
		cout << "You don't own an event card. Choose another action." << endl;


}


void Player::contingencyPlanner(int i, int playerNum, InfectionDeck ideck, Map newMap)
{
	int choice = i;
	int cityChoice;
	int cardId;
	int num = 0;
	bool hasEventCard = false;
	bool contingencyPlannner = false;
	char answer;
	Card* eventc;
	int matchingCardIndex;

	cout << "You are a contingency planner, do you want to use your assigned event card or an event card in your hand? Enter 'y' for assigned event or 'n' for event card:" << endl;
	cin >> answer;
	while (answer != 'y' || answer != 'n') cout << "Enter 'y' or 'n':" << endl;


	if (answer == 'n') this->useEventCard(i, playerNum, ideck, newMap);

	else if (answer == 'y') {

		num = this->getEventCard().getId();

		switch (num) {

		case 1: // Airlift
		{
			if (true) {
				cout << "Which player's pawn do you want to move?";
				cin >> choice;
				while (choice <= 0 || choice > playerNum) cin >> choice;

				cout << "Which city do you want to move it to?";
				cin >> cityChoice;
				while (cityChoice <= 0 || cityChoice > 48) cin >> cityChoice;

				//test this out
				//this->flight(cityChoice);

				this->flight(this->getHand()[cityChoice]->getId());

				this->removeEvent();

			}
			break;
		}

		case 3: // Resilient population
		{
			int discard;

			ideck.showDiscardPile();

			cout << "Which card do you want to remove from the game?" << endl;
			cin >> discard;

			this->removeEvent();

			break;
		}

		case 4: // Government Grant
		{

			cout << "In which city do you want to add a reserch center?";
			cin >> cityChoice;
			while (cityChoice <= 0 || cityChoice > 48) cin >> cityChoice;

			this->buildStation(&newMap);
			this->increaseAction();

			this->removeEvent();

			break;
		}

		case 5: // Forcast event card
		{
			int ind;
			vector<InfectionCard> temp;


			for (int j = 0; j < 6; j++)
			{
				temp.push_back(ideck.deck.front());
				cout << ideck.deck.at(j).getCityName() << endl;
			}

			string numbers[] = { "sixth","fifth","forth","third","second","first" };

			for (int j = 0; j < 6; j++) {

				cout << "Which card do you want to be in the " << numbers[j] << " position?" << endl;
				cin >> ind;

				ideck.deck.at(5 - j) = temp.at(ind);
				temp.at(ind) = temp.back();
				temp.pop_back();


				for (int k = 0; k < temp.size(); k++)
				{
					cout << temp.at(k).getCityName() << endl;
				}

			}

			this->removeEvent();

			break;
		}
		}
	}
}


